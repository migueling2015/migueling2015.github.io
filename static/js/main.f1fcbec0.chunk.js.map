{"version":3,"sources":["components/ListItem.jsx","components/DoughnutPieChart.jsx","components/List.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","jobTitle","jobCompany","jobType","jobM2","jobStructureType","jobCity","jobState","className","renderActiveShape","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","payload","fill","value","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","name","d","stroke","r","DoughnutPieChart","onPieEnter","data","index","setState","activeIndex","state","width","height","this","activeShape","dataKey","onMouseEnter","PureComponent","dataToTransfer","List","TrimFirst","areaByType","slice","length","console","log","error","listTitle","IsLoadingChart","objectToList","map","job","filters","indexOf","project_type","key","id","client_name","area","structural_system","city","API_URL_AREAS_1","API_URL_AREAS_2","API_CROS_ENEABLER","App","conteo","loading","loading1","loading2","error1","error2","data_areas_1","data_areas_2","filters1","filters2","fetchProjects","a","fetch","response","json","fetchAreas","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f1fcbec0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListItem=(props)=>{\r\n    const { jobTitle, jobCompany, jobType, jobM2, jobStructureType, jobCity, jobState}=props;\r\n    return(\r\n        <div className=\"job-listItem-container\">\r\n            <div>\r\n                <h5>{jobTitle} ({jobCompany})</h5>\r\n            </div>\r\n            <div>\r\n                <h6>{jobStructureType}</h6>\r\n            </div>\r\n            <div>\r\n                <h6>{jobType} ({jobM2} m2)</h6>\r\n            </div>\r\n            <div>\r\n                <h6>{jobCity} ({jobState})</h6>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nListItem.propTypes={\r\n    jobTitle:PropTypes.string,\r\n    jobCompany:PropTypes.string,\r\n    jobType:PropTypes.string,\r\n    jobM2:PropTypes.number,\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { PieChart, Pie, Sector } from 'recharts';\r\n\r\n//Datos recibidos. Estos entrarán por un props\r\n// const data = [\r\n//     { name: 'Group A', value: 400 },\r\n//     { name: 'Group B', value: 300 },\r\n//     { name: 'Group C', value: 300 },\r\n//     { name: 'Group D', value: 200 },\r\n//   ];\r\n\r\nconst renderActiveShape=(props)=> {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n            cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\r\n            fill, payload, percent, value,\r\n        } = props;\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? 'start' : 'end';\r\n\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill=\"#230000\">{payload.name}</text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill=\"#230000\"\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 7}\r\n        outerRadius={outerRadius + 12}\r\n        fill=\"#230000\"\r\n      />\r\n      <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke=\"#230000\" fill=\"none\" />\r\n      <circle cx={ex} cy={ey} r={2} fill=\"#230000\" stroke=\"none\" />\r\n      <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#230000\">{`Área: ${value} m2`}</text>\r\n      {/* <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\r\n        {`(Rate ${(percent * 100).toFixed(2)}%)`}\r\n      </text> */}\r\n    </g>\r\n  );\r\n};\r\n\r\nclass DoughnutPieChart extends PureComponent  {\r\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/hqnrgxpj/';\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            activeIndex: 0,\r\n            data:props.data,\r\n        };\r\n    };\r\n  \r\n    onPieEnter = (data, index) => {\r\n      this.setState({\r\n        activeIndex: index,\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <PieChart width={800} height={800}>\r\n          <Pie\r\n            activeIndex={this.state.activeIndex}\r\n            activeShape={renderActiveShape}\r\n            data={this.state.data}\r\n            cx={400}\r\n            cy={400}\r\n            innerRadius={120}\r\n            outerRadius={180}\r\n            fill=\"#9E1C00\"\r\n            // fill={fillGloball}\r\n            dataKey=\"value\"\r\n            onMouseEnter={this.onPieEnter}\r\n          />\r\n        </PieChart>\r\n      );\r\n    }\r\n};\r\n\r\nexport default DoughnutPieChart;\r\n\r\n  ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListItem from './ListItem.jsx';\r\nimport DoughnutPie from './DoughnutPieChart.jsx';\r\n\r\nimport '../assets/styles/ProjectStyles.css'\r\n\r\nvar dataToTransfer=[];\r\n\r\nconst List=(props)=>{\r\n    \r\n    try {\r\n        props.TrimFirst==\"true\"\r\n            ?dataToTransfer=props.areaByType.slice(0,props.areaByType.length)\r\n            :dataToTransfer=props.areaByType\r\n        console.log(dataToTransfer)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    \r\n    return(\r\n        <div className=\"job-list-container\">\r\n            <h3>{props.listTitle }</h3>\r\n            {props.IsLoadingChart\r\n                ?<h2>Cargando...</h2>\r\n                :<DoughnutPie data={dataToTransfer}/>\r\n            }\r\n            <ul>\r\n                {props.objectToList.map(job=>(\r\n                    props.filters.indexOf(job.project_type)>-1 &&\r\n                        <li key={job.id} >\r\n                            <ListItem   jobTitle={job.name} \r\n                                        jobCompany={job.client_name} \r\n                                        jobType={job.project_type} \r\n                                        jobM2={job.area} \r\n                                        jobStructureType={job.structural_system} \r\n                                        jobCity={job.city} \r\n                                        jobState={job.state}/>\r\n                        </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nList.propTypes={\r\n    listTitle:PropTypes.string,\r\n};\r\n\r\nexport default List;","import React from 'react';\n\nimport List from './components/List.jsx';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst API_URL_PRINCIPAL='https://www.pradic.co/api/proyectos';\nconst API_URL_AREAS_1='https://www.pradic.co/api/proyectos/areas-totales/?por=sistema-estructural';\nconst API_URL_AREAS_2='https://www.pradic.co/api/proyectos/areas-totales/?por=tipo-proyecto';\nconst API_CROS_ENEABLER='https://cors-anywhere.herokuapp.com/';\n\n\nclass App extends React.Component {\n  \n  state={\n    conteo:0,\n    loading: true,\n    loading1: true,\n    loading2: true,\n    error:null,\n    error1:null,\n    error2:null,\n    data:{},\n    data_areas_1:{},\n    data_areas_2:{},\n    filters1:[\"Diseño estructural\"],\n    filters2:[\"Construcción\",\"Supervisión o interventoría\",\"Análisis presupuestal\",\"Gerencia\"],\n  };\n\n  componentDidMount(){\n    this.fetchProjects();\n    this.fetchAreas();\n  };\n\n  fetchProjects=async()=>{\n    try {\n      const response=await fetch(API_CROS_ENEABLER+API_URL_PRINCIPAL);\n      const data=await response.json();\n\n      this.setState({\n        loading:false,\n        data:data,\n      });\n    } catch (error) {\n      this.setState({\n        loading:false,\n        error:error,\n      });      \n    }\n  };\n\n  fetchAreas=async()=>{\n    try {\n      const response=await fetch(API_CROS_ENEABLER+API_URL_AREAS_1);\n      const data_areas_1=await response.json();\n\n      this.setState({\n        loading1:false,\n        data_areas_1:data_areas_1,\n      });\n    } catch (error) {\n      this.setState({\n        loading1:false,\n        error1:error,\n      });      \n    }\n\n    try {\n      const response=await fetch(API_CROS_ENEABLER+API_URL_AREAS_2);\n      const data_areas_2=await response.json();\n\n      this.setState({\n        loading2:false,\n        data_areas_2:data_areas_2,\n      });\n    } catch (error) {\n      this.setState({\n        loading2:false,\n        error2:error,\n      });      \n    }\n  };\n  \n  render() {\n    if (!this.state.loading) {\n      return(\n        <div>\n          <List listTitle=\"Diseño estructural\"\n                areaByType={this.state.data_areas_1}\n                objectToList={this.state.data}\n                filters={this.state.filters1}\n                IsLoadingChart={this.state.loading1}\n                TrimFirst=\"false\"/>\n\n          <List listTitle=\"Gerencia y Proyectos\"\n                areaByType={this.state.data_areas_2}\n                objectToList={this.state.data}\n                filters={this.state.filters2}\n                IsLoadingChart={this.state.loading2}\n                TrimFirst=\"false\"/>\n        </div>\n      );\n    }else{\n      return(\n        <h1>Cargando...</h1>\n      )\n    }\n  };\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('data')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}